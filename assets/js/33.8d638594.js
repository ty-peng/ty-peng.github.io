(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{572:function(_,v,t){"use strict";t.r(v);var a=t(4),l=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("p",[_._v("分布式消息队列应用场景、应用思考点、技术选型等。")]),_._v(" "),t("h2",{attrs:{id:"一、分布式消息队列-mq-应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、分布式消息队列-mq-应用场景"}},[_._v("#")]),_._v(" 一、分布式消息队列 MQ 应用场景")]),_._v(" "),t("h3",{attrs:{id:"_1-服务解耦"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-服务解耦"}},[_._v("#")]),_._v(" 1. 服务解耦")]),_._v(" "),t("p",[_._v("用于业务拆分隔离后的通信。")]),_._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[_._v("不同种类业务拆分后的通信：")]),_._v(" "),t("ul",[t("li",[_._v("强依赖：直连，同步的 dubbo 调用，同步的 http 做 spring cloud 等")]),_._v(" "),t("li",[_._v("弱依赖：消息中间件，如果弱依赖不能失败，需要上游服务的可靠性投递")])])]),t("h3",{attrs:{id:"_2-削峰填谷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-削峰填谷"}},[_._v("#")]),_._v(" 2. 削峰填谷")]),_._v(" "),t("p",[_._v("把消息缓存到某个地方，慢速消费")]),_._v(" "),t("h3",{attrs:{id:"_3-异步化缓冲"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-异步化缓冲"}},[_._v("#")]),_._v(" 3. 异步化缓冲")]),_._v(" "),t("p",[_._v("适用于只需要保持最终一致性的业务，不需要实时强一致性，柔性事务")]),_._v(" "),t("h2",{attrs:{id:"二、mq-应用思考点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、mq-应用思考点"}},[_._v("#")]),_._v(" 二、MQ 应用思考点")]),_._v(" "),t("ul",[t("li",[_._v("生产端可靠性传递（消息发出去要跟数据库保持原子性）")]),_._v(" "),t("li",[_._v("消费端幂等（重复消息避免重复消费）")]),_._v(" "),t("li",[_._v("高可用（即使某个节点挂掉了也要保证还能使用）")]),_._v(" "),t("li",[_._v("低延迟（流量大冲压保证低延迟）")]),_._v(" "),t("li",[_._v("可靠性（消息不丢失，磁盘挂掉等问题的处理（分片，副本））")]),_._v(" "),t("li",[_._v("堆积能力")]),_._v(" "),t("li",[_._v("扩展性（横向扩展等）")]),_._v(" "),t("li",[_._v("…")])]),_._v(" "),t("h2",{attrs:{id:"三、如何进行技术选型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、如何进行技术选型"}},[_._v("#")]),_._v(" 三、如何进行技术选型")]),_._v(" "),t("ul",[t("li",[_._v("各 MQ 的性能、优缺点、相应的业务场景")]),_._v(" "),t("li",[_._v("集群架构模式，分布式、可扩展、高可用、可维护性")]),_._v(" "),t("li",[_._v("综合成本问题，集群规模，人员成本")]),_._v(" "),t("li",[_._v("未来的方向、规划、思考")])]),_._v(" "),t("h3",{attrs:{id:"各-mq-的性能、优缺点、相应的业务场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各-mq-的性能、优缺点、相应的业务场景"}},[_._v("#")]),_._v(" 各 MQ 的性能、优缺点、相应的业务场景")]),_._v(" "),t("ol",[t("li",[_._v("Active MQ\n"),t("ul",[t("li",[_._v("适合传统行业，中小型公司")]),_._v(" "),t("li",[_._v("消息并发、承载能力不强")]),_._v(" "),t("li",[_._v("适用于中小型业务系统、边缘系统")])])]),_._v(" "),t("li",[_._v("Rabbit MQ\n"),t("ul",[t("li",[_._v("可靠性，高可用")]),_._v(" "),t("li",[_._v("可维护性强")]),_._v(" "),t("li",[_._v("横向扩展比较麻烦")])])]),_._v(" "),t("li",[_._v("Rocket MQ\n"),t("ul",[t("li",[_._v("扩展性")]),_._v(" "),t("li",[_._v("高可用")]),_._v(" "),t("li",[_._v("可维护性相对麻烦")])])]),_._v(" "),t("li",[_._v("Kafka\n"),t("ul",[t("li",[_._v("扩展性")]),_._v(" "),t("li",[_._v("高可用")]),_._v(" "),t("li",[_._v("可维护性相对麻烦")]),_._v(" "),t("li",[_._v("对服务器硬件要求相对较低")])])])])])}),[],!1,null,null,null);v.default=l.exports}}]);