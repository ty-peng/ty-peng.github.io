(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{594:function(t,a,r){"use strict";r.r(a);var v=r(4),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"初步排查"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#初步排查"}},[t._v("#")]),t._v(" 初步排查")]),t._v(" "),r("p",[t._v("今天出现缓存未更新的问题，缓存是通过 Kafka 消费消息更新，日志没报异常，于是查消费情况。")]),t._v(" "),r("p",[t._v("查询该组的消费者，为 "),r("code",[t._v("none")])]),t._v(" "),r("p",[t._v("应该是应用异常了，查看日志，启动后一段时间 "),r("code",[t._v("OutOfMemoryError")])]),t._v(" "),r("h2",{attrs:{id:"oom-问题排查"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oom-问题排查"}},[t._v("#")]),t._v(" OOM 问题排查")]),t._v(" "),r("h3",{attrs:{id:"内存占用增长情况"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存占用增长情况"}},[t._v("#")]),t._v(" 内存占用增长情况")]),t._v(" "),r("p",[t._v("重启应用后，多次执行 "),r("code",[t._v("jmap")]),t._v(" 输出到文件"),r("br"),t._v("\n对比内存增长情况（"),r("code",[t._v("head")]),t._v(" 查看前面几行就行）")]),t._v(" "),r("h3",{attrs:{id:"堆栈信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#堆栈信息"}},[t._v("#")]),t._v(" 堆栈信息")]),t._v(" "),r("p",[t._v("多次执行 "),r("code",[t._v("jstack")]),t._v(" 输出到文件，查看对比当前堆栈信息（"),r("code",[t._v("less")]),t._v(" 查看）"),r("br"),t._v("\n查找应用包名关键词，找到对应业务方法"),r("br"),t._v("\n发现和某个数据库查询方法有关"),r("br"),t._v("\n开始排查业务方法问题")]),t._v(" "),r("p",[t._v("最后，发现是 DAO 层实现类代码里没有传条件参数，直接查的全表")]),t._v(" "),r("p",[t._v("预防方法："),r("br"),t._v("\nDruid 配置 Wall Filter 进行检查，视情况是否输出日志或直接抛异常。")])])}),[],!1,null,null,null);a.default=_.exports}}]);