(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{595:function(t,s,r){"use strict";r.r(s);var e=r(4),a=Object(e.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"title"},[t._v("需求")]),r("ul",[r("li",[t._v("Struts -> Spring MVC 兼容并存，平滑过渡")]),t._v(" "),r("li",[t._v("除指定的 Spring MVC 请求路径外，其他（包括不存在的路径）默认使用 Struts 处理")])])]),r("h2",{attrs:{id:"spring-mvc-与-struts-并存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-与-struts-并存"}},[t._v("#")]),t._v(" Spring MVC 与 Struts 并存")]),t._v(" "),r("p",[t._v("引入依赖")]),t._v(" "),r("p",[t._v("web.xml 配置")]),t._v(" "),r("div",{staticClass:"language-xml extra-class"},[r("pre",{pre:!0,attrs:{class:"language-xml"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- struts /* 请求都先走过滤器 --\x3e")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- servlet / Spring MVC Servlet 设置处理任何路径请求，具体由过滤器分发 --\x3e")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- TODO --\x3e")]),t._v("\n")])])]),r("p",[t._v("请求处理链：\nfilter -> servlet")]),t._v(" "),r("p",[t._v("所以在继承 StrutsPrepareAndExecuteFilter 的过滤器中：")]),t._v(" "),r("ul",[r("li",[t._v("调用 chain.doFilter 会走到 Spring MVC")]),t._v(" "),r("li",[t._v("调用 super.doFilter 走 Struts（因为继承的是 Struts 的过滤器）")])]),t._v(" "),r("h2",{attrs:{id:"请求分发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#请求分发"}},[t._v("#")]),t._v(" 请求分发")]),t._v(" "),r("ul",[r("li",[t._v("配置类使用静态变量存储需要 Spring MVC 处理的请求路径；")]),t._v(" "),r("li",[t._v("应用启动时扫描 @RequestMapping 注解的路径存入配置类静态变量；")]),t._v(" "),r("li",[t._v("在继承 StrutsPrepareAndExecuteFilter 的过滤器中，判断路径是否属于 Spring MVC 路径。")])]),t._v(" "),r("h2",{attrs:{id:"串行接口和批量接口的处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#串行接口和批量接口的处理"}},[t._v("#")]),t._v(" 串行接口和批量接口的处理")]),t._v(" "),r("p",[t._v("TODO")])])}),[],!1,null,null,null);s.default=a.exports}}]);