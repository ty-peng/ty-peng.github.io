(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{583:function(t,v,_){"use strict";_.r(v);var a=_(4),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("blockquote",[_("p",[t._v("编程思想总结")]),t._v(" "),_("p",[t._v("IOC")])]),t._v(" "),_("h2",{attrs:{id:"编程思想总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#编程思想总结"}},[t._v("#")]),t._v(" 编程思想总结")]),t._v(" "),_("h3",{attrs:{id:"重构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重构"}},[t._v("#")]),t._v(" 重构")]),t._v(" "),_("p",[t._v("遇到复杂的业务逻辑难以下手时，先将指定的业务隔离封装集中到一起，再进行修改，将变化集中。")]),t._v(" "),_("h3",{attrs:{id:"一般编码流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一般编码流程"}},[t._v("#")]),t._v(" 一般编码流程")]),t._v(" "),_("p",[t._v("面向对象 -> 实例化对象 -> 调用对象的方法（完成业务逻辑）")]),t._v(" "),_("h3",{attrs:{id:"设计思想"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计思想"}},[t._v("#")]),t._v(" 设计思想")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("接口能统一方法的调用，但不能统一对象的实例化")])]),t._v(" "),_("li",[_("p",[t._v("抽象相对稳定（相对不变），具体相对不稳定（相对多变）")])]),t._v(" "),_("li",[_("p",[t._v("一段代码如果要保持稳定，就不应该负责对象的实例化")]),t._v(" "),_("p",[t._v("只有一段代码中没有 new 的出现，才能保持代码的相对稳定，才能逐步实现 OCP\n把对象的实例化过程，转移到其他代码片段")])]),t._v(" "),_("li",[_("p",[t._v("统一对象的实例化：工厂模式（简单工厂（具体工厂）、抽象工厂（对具体工厂的抽象））")])]),t._v(" "),_("li",[_("p",[t._v("隔离不稳定代码，保持其他代码稳定")])])]),t._v(" "),_("h2",{attrs:{id:"ioc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ioc"}},[t._v("#")]),t._v(" IOC")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("DI 是 IOC 的实现")])]),t._v(" "),_("li",[_("p",[t._v("IOC 思想中，主控类，由具体类变成了容器")])]),t._v(" "),_("li",[_("p",[t._v("主要是控制权的反转")])]),t._v(" "),_("li",[_("p",[t._v("代码分为控制代码 / 新增业务代码")])]),t._v(" "),_("li",[_("p",[t._v("体现在新增业务不影响原本的控制代码，不管新增业务怎么变化，具体的控制只会由原来的控制代码实现，\n也就是控制权在于原本的控制代码，而不在于新增的业务")])])])])}),[],!1,null,null,null);v.default=s.exports}}]);