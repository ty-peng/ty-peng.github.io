(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{588:function(v,_,r){"use strict";r.r(_);var t=r(4),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,r=v._self._c||_;return r("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[r("h2",{attrs:{id:"需求描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#需求描述"}},[v._v("#")]),v._v(" 需求描述")]),v._v(" "),r("ul",[r("li",[v._v("需要在书籍/节目等资源详情页、模块化列表页、普通列表页等按优先级增加所属榜单信息展示。")]),v._v(" "),r("li",[v._v("此处有榜单组和榜单的概念，都可以可以新增、修改、上下线，榜单资源排行数据每日定时任务更新写入数据库。")]),v._v(" "),r("li",[v._v("榜单组上可以配置该组榜单推荐有效时间端，榜单上可以分别配置该榜单前多少位才展示在资源详情页、模块化列表页、普通列表页等。")])]),v._v(" "),r("h2",{attrs:{id:"方案设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#方案设计"}},[v._v("#")]),v._v(" 方案设计")]),v._v(" "),r("h3",{attrs:{id:"方案设计-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#方案设计-2"}},[v._v("#")]),v._v(" 方案设计 "),r("Badge",{attrs:{text:"v2.0"}})],1),v._v(" "),r("h4",{attrs:{id:"缓存设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缓存设计"}},[v._v("#")]),v._v(" 缓存设计")]),v._v(" "),r("ul",[r("li",[r("p",[v._v("资源 ID 所在榜单信息缓存")]),v._v(" "),r("ul",[r("li",[v._v("缓存数据实时更新"),r("br"),v._v(" "),r("code",[v._v("榜单下资源排名表数据改动 -> canal -> Kafka 消息 -> Redis -> 本地缓存")])]),v._v(" "),r("li",[v._v("手动触发一次缓存更新后，缓存基础数据存储于 Redis，后续机器本地缓存从 Redis 读取数据缓存在本地，保持最终一致性")]),v._v(" "),r("li",[v._v("本地缓存"),r("br"),v._v("\n缓存数据结构："),r("code",[v._v("Map<String, List<EntityRankingsDTO>>")]),r("br"),v._v("\nEntityRankingsDTO: "),r("code",[v._v("long rankId")]),v._v(" + "),r("code",[v._v("int showOrder")])])])]),v._v(" "),r("li",[r("p",[v._v("榜单信息缓存"),r("br"),v._v("\n本地缓存"),r("br"),v._v("\n（略）")])]),v._v(" "),r("li",[r("p",[v._v("榜单组缓存"),r("br"),v._v("\n本地缓存"),r("br"),v._v("\n（略）")])])]),v._v(" "),r("h4",{attrs:{id:"具体实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#具体实现"}},[v._v("#")]),v._v(" 具体实现")]),v._v(" "),r("ul",[r("li",[r("p",[v._v("提供一个服务，传入资源 ID")])]),v._v(" "),r("li",[r("p",[v._v("每次查询对应页面接口时，通过资源 ID 实时计算要显示的榜单信息，所以需要确保查询效率")])]),v._v(" "),r("li",[r("p",[v._v("利用缓存加速")])]),v._v(" "),r("li",[r("p",[v._v("榜单信息不存储在资源信息里，而是通过 ID 查询，这样做可以把榜单部分和资源部分业务独立开来")])]),v._v(" "),r("li",[r("p",[v._v("大致步骤：")]),v._v(" "),r("ol",[r("li",[v._v("传入资源类型和资源 ID，根据资源 ID 所在榜单信息缓存查找出该资源对应的所有对应榜单 ID 和排名"),r("br"),v._v("\n有效取周榜排名，其次月榜、总榜"),r("br"),v._v("\n如果资源不在任何榜单内，传入 ID，缓存中找不到则直接返回空，不管是不是缓存还未加载")]),v._v(" "),r("li",[v._v("过滤无效数据"),r("br"),v._v("\n榜单组状态、榜单状态、是否在榜单组推荐有效时间内、是否在榜单信息推荐配置有效排名内等")]),v._v(" "),r("li",[v._v("根据优先级计算出需要显示的榜单信息"),r("br"),v._v("\n榜单信息缓存、榜单组（总榜、分榜）缓存"),r("br"),v._v("\n先看资源是否存在于分榜：存在于多个分榜时，取最新创建的分榜；"),r("br"),v._v("\n再看榜单是否存在于多个子榜：取排名最高的子榜；"),r("br"),v._v("\n如果资源不存在于分榜，再看资源是否存在于总榜，如果有，就取最高的排名展示；"),r("br"),v._v("\n排名相同时取创建时间更新的")]),v._v(" "),r("li",[v._v("返回榜单信息"),r("br"),v._v("\nResourceRankingDTO:"),r("br"),v._v(" "),r("code",[v._v("Integer id, String name, Integer rank, Integer rangeType, Integer groupType, Integer groupId, String groupName")])])])]),v._v(" "),r("li",[r("p",[v._v("可优化项：")]),v._v(" "),r("ul",[r("li",[v._v("当前每次查询资源榜单信息时，都是通过资源 ID 实时计算要显示的榜单信息，计算过程中用到了很多缓存，对于计算结果也可以考虑添加一层缓存。\n"),r("ul",[r("li",[v._v("缓存详情页，模块化列表页和列表页等可以分开缓存")]),v._v(" "),r("li",[v._v("一台机器计算后，同步到 Redis，其他机器直接拉取 Redis 数据，防止不同机器计算结果不一致，最终一致性")]),v._v(" "),r("li",[v._v("也可以使用 Spring 缓存注解\n"),r("ul",[r("li",[v._v("如果是通过 Result 对象方式返回错误信息，那么假设有一次返回了错误信息也会被缓存")])])])])]),v._v(" "),r("li",[v._v("根据压测结果判断是否需要添加上述缓存\n"),r("ul",[r("li",[v._v("对比负载")]),v._v(" "),r("li",[v._v("对比耗时")])])])])])]),v._v(" "),r("h3",{attrs:{id:"方案设计-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#方案设计-3"}},[v._v("#")]),v._v(" 方案设计 "),r("Badge",{attrs:{text:"v1.0"}})],1),v._v(" "),r("ul",[r("li",[r("p",[r("code",[v._v("方案 1")])]),v._v(" "),r("p",[v._v("榜单 -> 资源"),r("br"),v._v("\n概要")]),v._v(" "),r("ul",[r("li",[v._v("节目/书籍添加两个字段或者 feature，rankingInfo 和 rankingTarget"),r("br"),v._v("\nrankingInfo 用于显示，rankingTarget 用于客户端跳转和更新 rankInfo 时不同榜单优先级对比")]),v._v(" "),r("li",[v._v("榜单更新时，判断榜单本身状态，把榜单下前 N 个资源更新对应字段，下榜资源情况对应字段信息")]),v._v(" "),r("li",[v._v("榜单本身下线时，清空榜单下前 N 个所有资源对应字段信息（定时任务判断是否有效期内，失效时执行操作）")]),v._v(" "),r("li",[v._v("榜单组推荐有效时间")]),v._v(" "),r("li",[v._v("资源详情页 模块化列表页 非模块化列表页 三种列表的前 N 项展示可以分别设置")]),v._v(" "),r("li",[v._v("同一个 rankingInfo 字段逗号间隔，- 表示无榜单信息，用于不同列表的展示，rankingId 同理")]),v._v(" "),r("li",[v._v("对不同的接口取不同的部分")])]),v._v(" "),r("details",{staticClass:"custom-block details"},[r("summary",[v._v("查看流程图")]),v._v(" "),r("img",{staticStyle:{margin:"0 auto",display:"block"},attrs:{src:"https://cdn.jsdelivr.net/gh/ty-peng/pic-bed/img/202009161800-design-resource-rank-榜单信息展示.svg",alt:"202009161800-design-resource-rank-榜单信息展示"}})])]),v._v(" "),r("li",[r("p",[r("code",[v._v("方案 2")])]),v._v(" "),r("p",[v._v("资源 -> 榜单"),r("br"),v._v("\n定时任务遍历每本书，再遍历每个榜单查询该书的榜单信息，再更新相关字段")])]),v._v(" "),r("li",[r("p",[v._v("优化")]),v._v(" "),r("ul",[r("li",[v._v("考虑把部分逻辑放到不同阶段")]),v._v(" "),r("li",[v._v("触发改定时")]),v._v(" "),r("li",[v._v("书籍存一个榜单 ID 改 多个")]),v._v(" "),r("li",[v._v("下面的逻辑统一为根据书籍 ID 查找优先级最高的榜单，简化流程，后台业务不要考虑太多特殊优化，")]),v._v(" "),r("li",[v._v("首先计算量也不会节省太多，对后台业务来说意义不大，而且会增加复杂性，特殊逻辑使共同逻辑可维护性降低")]),v._v(" "),r("li",[v._v("根据场景确定方案")])])])]),v._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),r("p",[r("strong",[v._v("先不考虑优化，考虑因素太多会增加设计复杂度，先简化业务流程，后面再考虑优化。")])])])}),[],!1,null,null,null);_.default=i.exports}}]);